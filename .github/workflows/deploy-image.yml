# Based on https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#publishing-a-package-using-an-action

name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `main`.
on:
  push:
    branches: ['main']

# Defines custom environment variables for the workflow. These are used for the Container registry domain.
# The name for the Docker image that this workflow builds is the IMAGE_NAME in the job matrix.
env:
  REGISTRY: ghcr.io

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
      #
    strategy:
      matrix:
        # SYNC: .github/workflows/deploy-image.yml:jobs/build-and-push-image/strategy, .gitlab-ci.yml/docker-build/parallel/matrix
        IMAGE_NAME:
          - avalonia-browser-base
          - avalonia-android-base

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step creates the build context based on the image name
      - name: Derive build context
        id: build-context
        env:
          IMAGE_NAME: ${{ matrix.IMAGE_NAME }}
        run: |
          . src/image-to-buildcontext.sh
          echo "DOCKER_CONTEXT_NAME=$DOCKER_CONTEXT_NAME" | tee -a "$GITHUB_OUTPUT"
          echo "DOTNET_WORKLOADS=$DOTNET_WORKLOADS" | tee -a "$GITHUB_OUTPUT"

      # This step looks inside the Dockerfile for the VERSION which becomes the primary tag
      - name: Extract primary tag (VERSION) from Dockerfile
        id: primary-tag
        env:
          DOCKER_CONTEXT_NAME: ${{ steps.build-context.outputs.DOCKER_CONTEXT_NAME }}
        run: |
          IMAGE_TAG=$(grep -E '^#:: VERSION=.*$' "src/$DOCKER_CONTEXT_NAME/linux/Dockerfile" | awk 'BEGIN{FS="="} { print $2 }')
          if [ -z "$IMAGE_TAG" ]; then echo "'#:: VERSION=<version>' missing from src/$DOCKER_CONTEXT_NAME/linux/Dockerfile"; exit 1; fi
          echo "tag=$IMAGE_TAG" | tee -a "$GITHUB_OUTPUT"
      
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.IMAGE_NAME }}
          # The primary tag comes from the VERSION embedded in the Dockerfile.
          # We add in an 'edge' tag like Alpine, and a date tag if we ever do scheduled CI jobs
          tags: |
            type=raw,value=${{ steps.primary-tag.outputs.tag }}
            type=edge,branch=main
            type=schedule,pattern={{date 'YYYYMMDD'}}

      # Mimic buildx in src/build-linux.sh.
      # QEMU is needed to create images for the linux/arm64 platform.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: src/${{ steps.build-context.outputs.DOCKER_CONTEXT_NAME }}/linux
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          #   SYNC: src/build-linux.sh, .github/workflows/deploy-image.yml:jobs/build-and-push-image/steps[id=push]
          platforms: |
            linux/amd64
          #     Confer: https://docs.docker.com/build/ci/github-actions/cache/
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            DOTNET_WORKLOADS=${{ steps.build-context.outputs.DOTNET_WORKLOADS }}
          cache-from: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.IMAGE_NAME }}:buildcache
          cache-to: |
            type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ matrix.IMAGE_NAME }}:buildcache,mode=max,image-manifest=true,oci-mediatypes=true
      
      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
